{"version":3,"sources":["images/github.svg","Board.js","Cell.js","Announcement.js","Title.js","AppBar.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","Board","_this","this","Object","classCallCheck","movePlayer","x","y","player","cb","board","getCell","getOpenCells","reduce","freeCells","row","rowIdx","colIdx","length","push","findWinner","columns","col","diags","left","right","i","allTheSame","every","cell","checkMatrix","matrix","j","Cell","state","hovered","handleClick","_this$props","props","disabled","setState","coords","split","map","num","parseInt","addClassNames","_this$props2","concat","handleMouseEnter","handleMouseLeave","render","_this$props3","children","react_default","a","createElement","onMouseEnter","onMouseLeave","className","onClick","Component","Announcement","winner","boardIsFilled","reset","message","Title","AppBar","App","possibleConstructorReturn","getPrototypeOf","call","nextPlayer","_cell","slicedToArray","gameOver","playerMove","checkWinner","setTimeout","aiMove","openCells","_openCells$Math$floor","Math","floor","random","addClassName","renderMove","renderGrid","src_Cell","key","renderAnnouncement","announcement","Announcement_Announcement","react","src_AppBar","src_Title","document","title","ReactDOM","App_App","getElementById"],"mappings":"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","file":"static/js/main.3dfe7252.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.84856d11.svg\";","class Board {\n  constructor() {\n    this.board = [];\n    for (let i = 0; i < 3; i++) {\n      const row = [];\n      for (let j = 0; j < 3; j++) {\n        row.push(0);\n      }\n      this.board.push(row);\n    }\n  }\n\n  // move playing player/ai\n  movePlayer = (x, y, player, cb) => {\n    this.board[x][y] = player;\n    typeof cb === 'function' && cb();\n  };\n\n  // determine which cell belongs to player\n  getCell = (x, y) => {\n    return this.board[x][y];\n  };\n\n  // array of available playable cells\n  getOpenCells = () => {\n    return this.board.reduce((freeCells, row, rowIdx) => {\n      for (let colIdx = 0; colIdx < row.length; colIdx++) {\n        if (this.board[rowIdx][colIdx] === 0) {\n          freeCells.push([rowIdx, colIdx]);\n        }\n      }\n      return freeCells;\n    }, []);\n  };\n\n  findWinner = () => {\n    const { board } = this;\n\n    // find column matches\n    const columns = [];\n    for (let rowIdx = 0; rowIdx < board.length; rowIdx++) {\n      const col = [];\n      for (let colIdx = 0; colIdx < board[rowIdx].length; colIdx++) {\n        col.push(board[colIdx][rowIdx]);\n      }\n      columns.push(col);\n    }\n\n    // find diagonal matches\n    const diags = { left: [], right: [] };\n    for (let i = 0; i < board.length; i++) {\n      diags.left.push(board[i][i]);\n      diags.right.push(board[board.length - i - 1][i]);\n    }\n\n    // check if all items in a single row are the same\n    const allTheSame = row => {\n      return row.every(cell => cell === row[0]);\n    };\n\n    // get winner after row, column, and diagonal matches are aggregated into arrays\n    const checkMatrix = matrix => {\n      for (let x = 0; x < matrix.length; x++) {\n        if (allTheSame(matrix[x]) && matrix[x][0]) {\n          return matrix[x][0];\n        }\n      }\n    };\n\n    // check rows, columns, and diagonals and return player 1, player 2, or nothing\n    return checkMatrix(board)\n      ? checkMatrix(board)\n      : checkMatrix(columns)\n      ? checkMatrix(columns)\n      : checkMatrix([diags.left, diags.right]);\n  };\n}\n\nexport default Board;","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  state = {\n    hovered: false\n  };\n\n  // disable clicking on cell after player has moved\n  handleClick = cell => {\n    const { disabled, movePlayer } = this.props;\n    this.setState({ disabled: true }, () => {\n      const coords = cell.split('-').map(num => parseInt(num));\n      !disabled && movePlayer(coords);\n    });\n  };\n\n  addClassNames = () => {\n    const { cell, disabled } = this.props;\n    return `cell cell-${cell} ${disabled ? 'disabled' : ''}`;\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ hovered: true })\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ hovered: false })\n  };\n\n  render = () => {\n    const { cell, children, player, disabled } = this.props;\n    return (\n      <button\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n        className={this.addClassNames()}\n        onClick={() => this.handleClick(cell)}>\n        {this.state.hovered ? <div className={`hoverP${!disabled && player}`} />  : ''}\n        {children}\n      </button>\n    );\n  };\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\n\nexport default class Announcement extends Component {\n  render = () => {\n    const { winner, boardIsFilled, reset } = this.props;\n    const message = !winner && boardIsFilled() ? `Game Draw !!!!` : `Player ${winner} has won!`;\n\n    return (\n      <div className=\"backdrop\">\n        <div className=\"modal-container\">\n          <div className=\"message-container\">\n            {message}\n            <button onClick={reset}>reset</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n","import React from 'react';\n\nconst Title = () => (\n  <div className=\"title-container\">\n    <h2>Tic Tac Toe!</h2>\n    <h3>Computer = Player 2</h3>\n  </div>\n);\n\nexport default Title;","import React from 'react';\nimport GH_ICON from './images/github.svg';\n\nconst AppBar = () => (\n  <div className=\"app-bar\">\n  </div>\n);\n\nexport default AppBar;\n","import React, { Component, Fragment } from 'react';\nimport Board from './Board';\nimport Cell from './Cell';\nimport Announcement from './Announcement';\nimport Title from './Title';\nimport AppBar from './AppBar';\nimport './App.scss';\nimport Particles from 'react-particles-js';\n\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      player: 1,\n      gameOver: false,\n      winner: 0\n    };\n    this.board = new Board();\n  }\n\n  // switch players\n  nextPlayer = () => {\n    return this.state.player === 1 ? 2 : 1;\n  };\n\n  // set coordinates on board to player making move\n  movePlayer = cell => {\n    const [x, y] = cell;\n    !this.state.gameOver && this.board.movePlayer(x, y, this.state.player, this.playerMove);\n  };\n\n  // player move then ai move\n  playerMove = () => {\n    this.checkWinner();\n    this.setState({ player: this.nextPlayer() }, () => {\n      setTimeout(this.aiMove, 200); // realistic time between player and ai move\n    });\n  };\n\n  // ai move to random playable cell\n  aiMove = () => {\n    const openCells = this.board.getOpenCells();\n    if (openCells.length) {\n      const [x, y] = openCells[Math.floor(Math.random() * openCells.length)];\n      !this.state.gameOver && this.board.movePlayer(x, y, this.state.player, () => {\n          this.checkWinner();\n          this.setState({ player: this.nextPlayer() });\n        });\n    }\n  };\n\n  // check if any playable cells are left on board\n  boardIsFilled = () => {\n    return !this.board.getOpenCells()[0];\n  };\n\n  // check winner\n  checkWinner = () => {\n    const { findWinner } = this.board;\n    if (findWinner() > 0 || this.boardIsFilled()) {\n      this.setState({ gameOver: true, winner: findWinner() });\n    }\n  };\n\n  reset = () => {\n    this.board = new Board();\n    this.setState({ player: 1, gameOver: false, winner: 0 });\n  };\n\n  // renders x or o\n  addClassName = (x, y) => {\n    const { getCell } = this.board;\n    return getCell(x, y) === 1 ? 'player1' : getCell(x, y) === 2 ? 'player2' : '';\n  };\n\n  // show x or o based on who's turn it is\n  renderMove = (x, y) => {\n    return <div className={this.addClassName(x, y)} />;\n  };\n\n  // show cells based on board layout\n  renderGrid = () => {\n    return this.board.board.map((row, x) => {\n      return row.map((cell, y) => {\n        const coords = `${x}-${y}`;\n        const disabled = cell > 0; // disable clicking if move exists on cell\n        return (\n          <Cell\n            key={coords}\n            cell={coords}\n            disabled={disabled}\n            movePlayer={this.movePlayer}\n            player={this.state.player}>\n            {this.renderMove(x, y)}\n          </Cell>\n        );\n      });\n    });\n  };\n\n  // show announcement when game ends\n  renderAnnouncement = () => {\n    const announcement = (\n      <Announcement\n        winner={this.state.winner}\n        boardIsFilled={this.boardIsFilled}\n        reset={this.reset} />\n    );\n    return this.state.gameOver ? announcement : '';\n  };\n\n  render = () => {\n    return (\n      <div>\n      <Fragment>\n        <AppBar />\n        {this.renderAnnouncement()}\n        <Title />\n        <div className=\"grid\">{this.renderGrid()}</div>\n      </Fragment>\n      </div>\n      \n    );\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Particles from 'react-particles-js';\n\ndocument.title = 'React - Tic Tac Toe';\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}